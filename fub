#!/usr/bin/env python3
"""Determine the type of macOS app."""

# standard libraries
import logging
import os
import plistlib
from pathlib import Path

# third party libraries
from macholib import MachO, mach_o

# Setup logging.
logging.basicConfig(
    filename="fub.log",
    filemode="w",
    format="%(asctime)s|%(name)s|%(levelname)s|%(message)s",
    level="INFO",
)


def get_arch(mac_app):
    """Determine the type of macOS app."""
    m = MachO.MachO(mac_app)
    archs = []
    for header in m.headers:
        cpu_type = header.header.cputype
        arch = str(mach_o.CPU_TYPE_NAMES.get(cpu_type)).lower()
        archs.append(arch)
    return archs


def get_app_binaries():
    """Get list of installed macOS applications."""
    apps = os.listdir("/Applications")
    binaries = []
    for app in apps:
        if app in (".DS_Store", ".localized", "Intel Power Gadget", "Utilities"):
            continue

        app_plist = Path("/Applications/" + app + "/Contents/Info.plist")
        try:
            with open(app_plist, "rb") as f:
                plist_data = plistlib.load(f)
            app_exe = plist_data["CFBundleExecutable"]
        except FileNotFoundError as e:
            print()
            logging.error(e)

        mac_binary = Path("/Applications/" + app + "/Contents/MacOS/" + app_exe)
        binaries.append(mac_binary)

    return binaries


if __name__ == "__main__":
    for binary in get_app_binaries():
        try:
            print(binary, end=" -> ")
            print(get_arch(binary))
        except FileNotFoundError as e:
            print()
            logging.error(e)
        except NotADirectoryError as e:
            print()
            logging.error(e)
