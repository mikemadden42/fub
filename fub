#!/usr/bin/env python3
"""Determine the type of macOS app."""

# standard libraries
import logging
import os
import plistlib
from pathlib import Path
from typing import List, Union

# third party libraries
from macholib import MachO, mach_o

# Setup logging.
logging.basicConfig(
    filename="fub.log",
    filemode="w",
    format="%(asctime)s|%(name)s|%(levelname)s|%(message)s",
    level="INFO",
)


def get_arch(mac_app: Union[str, Path]) -> List[str]:
    """
    Determine the architecture type(s) of a macOS app.

    Args:
        mac_app (Union[str, Path]): Path to the macOS app.

    Returns:
        List[str]: List of architecture types present in the app.
    """
    m = MachO.MachO(str(mac_app))
    archs = []
    for header in m.headers:
        cpu_type = header.header.cputype
        arch = str(mach_o.CPU_TYPE_NAMES.get(cpu_type)).lower()
        archs.append(arch)
    return archs


def print_list(items: List[str], header: str) -> None:
    """
    Print a list with the provided header.

    Args:
        items (List[str]): List of items to be printed.
        header (str): Header to be printed before the list.
    """
    print(header)
    for item in items:
        print(item)
    print()


def filter_binaries(mac_apps: List[Union[str, Path]]) -> None:
    """
    Determine the architecture type(s) of macOS apps and print them categorized.

    Args:
        mac_apps (List[Union[str, Path]]): List of paths to macOS apps.
    """
    intel_binaries = []
    apple_binaries = []
    universal_binaries = []
    for mac_app in mac_apps:
        try:
            m = MachO.MachO(str(mac_app))
        except ValueError:
            continue
        archs = []
        for header in m.headers:
            cpu_type = header.header.cputype
            arch = str(mach_o.CPU_TYPE_NAMES.get(cpu_type)).lower()
            archs.append(arch)
        if "x86_64" in archs and "arm64" in archs:
            universal_binaries.append(str(mac_app))
        elif archs[0] == "x86_64":
            intel_binaries.append(str(mac_app))
        elif archs[0] == "arm64":
            apple_binaries.append(str(mac_app))

    print_list(intel_binaries, "Intel Binaries")
    print_list(apple_binaries, "Apple Binaries")
    print_list(universal_binaries, "Universal Binaries")


def get_app_binaries() -> List[Union[str, Path]]:
    """
    Get a list of installed macOS applications.

    Returns:
        List[Union[str, Path]]: List of paths to macOS app binaries.
    """
    apps = os.listdir("/Applications")
    apps.sort()
    binaries = []
    for app in apps:
        try:
            app_plist = Path("/Applications/" + app + "/Contents/Info.plist")
            with open(app_plist, "rb") as f:
                plist_data = plistlib.load(f)
            app_exe = plist_data["CFBundleExecutable"]
            mac_binary = Path("/Applications/" + app + "/Contents/MacOS/" + app_exe)
            binaries.append(mac_binary)
        except FileNotFoundError as e:
            logging.error(e)
        except NotADirectoryError as e:
            logging.error(e)

    return binaries


if __name__ == "__main__":
    filter_binaries(get_app_binaries())
